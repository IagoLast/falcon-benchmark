!function(n,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.falcon=t():n.falcon=t()}(window,function(){return function(n){var t={};function e(c){if(t[c])return t[c].exports;var I=t[c]={i:c,l:!1,exports:{}};return n[c].call(I.exports,I,I.exports,e),I.l=!0,I.exports}return e.m=n,e.c=t,e.d=function(n,t,c){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:c})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var c=Object.create(null);if(e.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var I in n)e.d(c,I,function(t){return n[t]}.bind(null,I));return c},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=1)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("if (typeof window !== 'undefined') {\n  var performance = window.performance\n} else {\n  var { performance } = eval('require(\"perf_hooks\")'); // eslint-disable-line\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({ performance });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYWxjb24vLi9saWIvdXRpbHMuc2VydmljZS5qcz8wNDE3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsT0FBTyxjQUFjLGlDQUFpQztBQUN0RDs7QUFFQSwwREFBZ0IsYyIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZVxufSBlbHNlIHtcbiAgdmFyIHsgcGVyZm9ybWFuY2UgfSA9IGV2YWwoJ3JlcXVpcmUoXCJwZXJmX2hvb2tzXCIpJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBwZXJmb3JtYW5jZSB9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/mitt/dist/mitt.es.js\n//      \n// An event handler can take an optional event argument\n// and should not return a value\n                                          \n                                                               \n\n// An array of all currently registered event handlers for a type\n                                            \n                                                            \n// A map of event types and their corresponding event handlers.\n                        \n                                 \n                                   \n  \n\n/** Mitt: Tiny (~200b) functional event emitter / pubsub.\n *  @name mitt\n *  @returns {Mitt}\n */\nfunction mitt(all                 ) {\n\tall = all || Object.create(null);\n\n\treturn {\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to listen for, or `"*"` for all events\n\t\t * @param  {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton: function on(type        , handler              ) {\n\t\t\t(all[type] || (all[type] = [])).push(handler);\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to unregister `handler` from, or `"*"`\n\t\t * @param  {Function} handler Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff: function off(type        , handler              ) {\n\t\t\tif (all[type]) {\n\t\t\t\tall[type].splice(all[type].indexOf(handler) >>> 0, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `"*"` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * @param {String} type  The event type to invoke\n\t\t * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit: function emit(type        , evt     ) {\n\t\t\t(all[type] || []).slice().map(function (handler) { handler(evt); });\n\t\t\t(all[\'*\'] || []).slice().map(function (handler) { handler(type, evt); });\n\t\t}\n\t};\n}\n\n/* harmony default export */ var mitt_es = (mitt);\n//# sourceMappingURL=mitt.es.js.map\n\n// EXTERNAL MODULE: ./lib/utils.service.js\nvar utils_service = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./lib/profiler.service.js\n\nconst performance = utils_service["a" /* default */].performance;\n\n\n/**\n * Computes the time needed to run the function\n * @param {function} fn \n */\nfunction profile(fn) {\n  const start = performance.now();\n  fn();\n  const end = performance.now();\n  return end - start;\n}\n\n/**\n* Computes the time needed to run the function as the avg time of 1000 runs.\n* This function is used when fn takes a small amout of time to be executed\n* @param {function} fn \n*/\nfunction profileAvg(fn) {\n  const start = performance.now();\n  for (let i = 0; i < 1000; i++) {\n    fn();\n  }\n  const end = performance.now();\n  return (end - start) / 1000;\n}\n\n/**\n* Computes statistical parameters from a time array.\n* @param {Array<number>} execution \n*/\nfunction getStats(execution = []) {\n  const total = _sum(execution);\n  const avg = _mean(execution);\n  const variance = _variance(execution, avg);\n  const min = _min(execution);\n  const max = _max(execution);\n  const median = execution.sort()[Math.floor(execution.length / 2)];\n\n  return { avg, median, max, min, variance }\n}\n\nfunction _max(array) {\n  return array.reduce((p, n) => p > n ? p : n, Number.NEGATIVE_INFINITY)\n}\n\nfunction _min(array) {\n  return array.reduce((p, n) => p < n ? p : n, Number.POSITIVE_INFINITY)\n}\n\nfunction _variance(array, mean = _mean(array)) {\n  return _mean(array.map(e => Math.pow(e - mean, 2)));\n}\n\nfunction _sum(array) {\n  return array.reduce((p, n) => p + n, 0);\n}\n\nfunction _mean(array) {\n  const sum = _sum(array);\n  return sum / array.length;\n}\n\n\n/* harmony default export */ var profiler_service = ({\n  getStats,\n  profile,\n  profileAvg\n});\n// CONCATENATED MODULE: ./lib/index.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "on", function() { return on; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "off", function() { return off; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNumberOfTests", function() { return getNumberOfTests; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "benchmark", function() { return benchmark; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "xbenchmark", function() { return xbenchmark; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "run", function() { return run; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "runBenchmark", function() { return runBenchmark; });\n\n\n\nconst EVENTS = {\n    TEST_COMPLETE: \'test-complete\',\n    SUITE_COMPLETE: \'suite-complete\'\n}\nconst emitter = mitt_es();\nconst tests = [];\n\n/**\n * \n * @param {string} event \n * @param {function} callback \n */\nfunction on(event, callback) {\n    return emitter.on(event, callback);\n}\n\n/**\n * \n * @param {string} event \n * @param {function} callback \n */\nfunction off(event, callback) {\n    return emitter.off(event, callback);\n}\n\n/**\n * Get the count of tests in the suite\n */\nfunction getNumberOfTests() {\n    return tests.length;\n}\n\n/**\n * Add a test to the test list.\n * \n * @param {string} name - Name of the benchmark\n * @param {function} fn - Function to benchmark\n * @param {object} options \n * @param {number} options.runs - Number of cycles to execute the funcion \n */\nfunction benchmark(name, fn, options = {}) {\n    tests.push({ name, fn, options, skipped: false });\n}\n\n/**\n * Add a test that wont be executed to the test list\n */\nfunction xbenchmark(name, fn, options = {}) {\n    tests.push({ name, fn, options, skipped: true });\n}\n\n/**\n * Run all the specs\n */\nfunction run() {\n    const results = [];\n    while (tests.length) {\n        const test = tests.shift();\n        const result = test.skipped ? {} : runBenchmark(test.name, test.fn, test.options);\n        emitter.emit(EVENTS.TEST_COMPLETE, { test, result });\n        results.push({ test, result });\n    }\n    emitter.emit(EVENTS.SUITE_COMPLETE, results);\n}\n\n/**\n * Compute stats about the given function.\n * \n * @param {string} name - Name of the benchmark\n * @param {function} fn - Function to benchmark\n * @param {object} options \n * @param {number} options.runs - Number of cycles to execute the funcion \n */\nfunction runBenchmark(name, fn, options = {}) {\n    const { runs = 5e4 } = options;\n    const executions = [];\n    // First run to determine which function use\n    const profileFn = profiler_service.profile(fn) === 0 ? profiler_service.profileAvg : profiler_service.profile;\n\n    for (let i = 0; i < runs; i++) {\n        const time = profileFn(fn);\n        executions.push(time);\n    }\n\n    const result = profiler_service.getStats(executions);\n    result.meta = { uns: runs, aprox: (profileFn === profiler_service.profileAvg) };\n    return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}])});